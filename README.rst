OpsMgr
=============

This project installs Nagios, Elasticsearch, Logstash and Kibana (ELK stack), and the OpsMgr
command line and graphical user interface (as an OpenStack Horizon extension) on cluster controller
nodes deployed with os-services. Nagios is automatically configured to monitor the
OpenStack services running in the cluster. Kibana dashboards are provided to monitor logs
generated by OpenStack and Ceph. The OpsMgr user interfaces can be used to identify additional
devices in the environment to be monitored and automatically add those devices to be monitored
into Nagios and ELK.

In addition OpsMgr is fully extensible via plugins to support additional open Ops tools
(besides Nagios and ELK) and additional types of resources (besides OpenStack services.)

In a typical Private Cloud deployment scenario each node in the cluster is first provisioned
using services from the cluster-genesis project, which include bare metal provisioning and
operating system installation. Afterwards, solution specific services provided by the
os-services project are used to guide the installation and configuration of OpenStack, and
orchestrate the installation of OpsMgr services and UI within the private cloud.

The os-services orchestration of OpsMgr is achieved by setting the following variables::

   > export DEPLOY_OPSMGR=yes
   > export ANSIBLE_HOST_KEY_CHECKING=False

And then running the following scripts::

   > ./scripts/bootstrap-opsmgr.sh
   > ./scripts/create-cluster-opsmgr.sh

These scripts perform the following steps:

  * execution of recipes/privatecloud-newton Ansible playbook that queries OpenStack
    and the /var/oprc/inventory.yml file of cluster-genesis for the variables necessary
    for installation of OpsMgr services and UI on cluster controller nodes

  * execution of playbooks/setup.yml Ansible playbook that provisions SSH keys
    to each endpoint managed by OpsMgr services

  * execution of playbooks/hosts.yml Ansible playbook that creates containers for Nagios and
    the ELK stack

  * execution of playbooks/site.yml Ansible playbook to deploy OpsMgr services and dashboards
    (within OpenStack Horizon containers), completely installs the Nagios server and the ELK
    stack services, and configure haproxy and database services

  * execution of playbooks/target.yml Ansible playbook to deploy endpoint services for Nagios (NRPE)
    and the ELK stack and to push all necessary configuration to endpoints managed
    by OpsMgr services

Extensibility for OpsMgr can be easily achieved by providing additional Ansible playbooks.

The scripts above may be invoked manually to resolve errors, particularly network timeout
related errors.

Monitoring features of OpsMgr may be utilized with non-OpenStack environments by installing OpsMgr
with a minimal OpenStack footprint. An Ubuntu 16.04 VM will be necessary to do this. Simply create
an Ubuntu 16.04 VM, clone the OpsMgr project into it, and run the following scripts to install
OpsMgr services using a minimal OpenStack installation::

   > ./scripts/bootstrap-opsmgr-min.sh
   > ./scripts/create-cluster-opsmgr-min.sh

Default credentials for the integrated Ops applications are::

    Nagios user: nagios
    Nagios password: nagios
    Kibana user: kibana
    Kibana password: kibana

For security purposes it is recommended for users to change these passwords immediately after
initial install. Documented practices to change default passwords for other Ops applications
should be observed as well.

If different default credentials are desired, please set or modify the following Ansible variables
prior to installing OpsMgr:

For Nagios::

    nagios_group: nagios (all configuration for Nagios can be changed by users belonging to this group)
    nagios_user:  nagios
    nagios_pass:  nagios
    Location: playbooks/roles/nagios/defaults/main.yml (or use standard Ansible override mechanisms: vars, group_vars, extra_vars, etc.)

For ELK::

    kibana_service_user: kibana
    kibana_password: kibana
    Location: playbooks/roles/kibana/defaults/main.yml (or use standard Ansible override mechanisms: vars, group_vars, extra_vars, etc.)

Passwords for the OpsMgr database (Galera Cluster) are randomly generated and stored in
/etc/opsmgr/user_secrets.yml on the deployer node.

Default values for other Ansible variables may be overridden as well. For options please check
this file: playbooks/defaults.yml

Uninstall
---------
To uninstall OpsMgr the following can be done:

  * From the deployer node:
      * Run the clean.yml playbook from the playbooks directory to remove the OpsMgr containers
      * Edit the ~/.ssh/config file and remove each Host entry that uses the IdentityFile opsmgr.key
  * From each controller node:
      * Remove the directory /etc/opsmgr
      * From /etc/haproxy/conf.d remove the configuration files for Elasticsearch, Kibana, Logstash and Nagios  
        and restart the haproxy service
  * From each controller node and endpoint being monitored:
      * Use apt purge to remove beaver and nagios-nrpe-server
      * Remove the directories /etc/nagios and /etc/beaver

Bug Reporting
-------------
The current list of bugs can be found on launchpad:
https://bugs.launchpad.net/open-power-ref-design

Related projects
----------------
   - `OpenStack based recipes <https://github.com/open-power-ref-design>`_
   - `cluster-genesis <https://github.com/open-power-ref-design-toolkit/cluster-genesis>`_
   - `os-services <https://github.com/open-power-ref-design-toolkit/os-services>`_
   - `ceph-services <https://github.com/open-power-ref-design-toolkit/ceph-services>`_

