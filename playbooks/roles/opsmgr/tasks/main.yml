---

    # install pre-reqs

    - name: installs prereq packages with aptitude
      apt: name={{ item }} state=present update_cache=true
      with_items: "{{ apt_packages }}"
      when: imported is undefined or imported != true

    - name: decide if to use pip in isolated mode
      set_fact: pipargs='--isolated'
      when: imported is defined and imported == true 

    - name: installs prereq packages with pip
      pip: name={{ item }} state=present executable={{ pipexec }} extra_args="{{ pipargs }}"
      with_items: "{{ pip_packages }}"

    # copy the code to server

    - name: create tmp directory
      file:
        path: "{{ tmp_dir }}"
        state: directory
        mode: 0700

    - name: copy code to server
      synchronize:
        src: "{{ opsmgr_dir }}"
        dest: "{{ tmp_dir }}/opsmgr"
        mode: push
        compress: yes

    # opsmgr python package integration

    - name: install opsmgr modules
      shell: "PBR_VERSION={{ opsmgr_version}} python setup.py install"
      args:
        chdir: "{{ tmp_dir }}/{{ item }}"
      with_items: "{{ opsmgr_modules }}"

    # create /etc/opsmgr and /var/log/opsmgr
    
    - name: create /etc/opsmgr
      file:
        path: "/etc/opsmgr"
        state: directory
        mode: 0755

    - name: create /etc/opsmgr/logging.yaml
      template:
        src: logging.yaml.j2
        dest: /etc/opsmgr/logging.yaml

    - name: copy ssh keys for service access
      copy:
        src: "{{ opsmgr_dir }}/keys/current/{{ item }}"
        dest: "/etc/opsmgr"
        owner: root
        group: root
        mode: 0600
      with_items:
        - opsmgr.key
        - opsmgr.pub

    - name: generate random passphrase to encrypt passwords in the db
      shell: python -c "import base64;import os;print(str(base64.b64encode(os.urandom(32))))"
      register: random_passphrase  

    - name: create opsmgr.conf
      template:
        src: opsmgr.conf.j2
        dest: /etc/opsmgr/opsmgr.conf
        force: yes

    - name: update opsmgr.conf with container access info
      blockinfile:
        dest: /etc/opsmgr/opsmgr.conf
        block: |
            [NAGIOS]
            server       = "{{ item.0.address }}"
            userid       = "{{ ansible_ssh_user }}"
            sshkey       = "/etc/opsmgr/opsmgr.key"
            web_protocol = "http://"
            web_proxy    = "{{ item.0.hostaddr }}"
            web_port     = "{{ item.1.host }}"
            web_path     = "/nagios"
      when: >
        item.0.role == 'nagios' and
        item.0.host == hostvars[inventory_hostname].host and
        item.1.name == 'http'
      with_subelements:
        - "{{ opsmgr_containers }}"
        - ports

    - name: create /var/log/opsmgr
      file:
        path: "/var/log/opsmgr/"
        state: directory
        mode: 0777

    # create the database

    - name: create db for service
      mysql_db:
        login_user: "{{ db_login_user }}"
        login_password: "{{ db_login_password }}"
        login_host: "{{ db_login_host }}"
        name: "{{ db_name }}_{{ inventory_hostname }}"
        state: "present"
      ignore_errors: yes # db might already exist

    - name: create service user and grant access to db
      mysql_user:
        login_user: "{{ db_login_user }}"
        login_password: "{{ db_login_password }}"
        login_host: "{{ db_login_host }}"
        host: "{{ item }}"
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        state: "present"
        priv: "*.*:ALL,GRANT"
      with_items:
        - "%"
        - "{{ inventory_hostname }}"
        - 127.0.0.1
        - ::1
        - localhost
      ignore_errors: yes # user might already exist
      #delegate_to: "{{ db_login_host }}"

    - name: create the database tables
      command: opsmgr-admin db_sync
      ignore_errors: yes # tables might already exist

    # create the default rack
    
    - name: create the default rack
      command: opsmgr add_rack -l default
      ignore_errors: yes # rack might already exist

    # remove the code after it is installed

    - name: Remove tmp directory for the code
      file:
        path: "{{ tmp_dir }}"
        state: absent

    # drop enabled files for horizon
    
    - name: Copy the ui files into the enabled directory
      copy:
        src: "{{ opsmgr_dir }}/horizon/enabled"
        dest: "{{ ui_enabled }}"
      notify: restart apache
      when: install_ui is defined and install_ui == true


