---

# install pre-reqs

- name: installs prereq packages with aptitude
  apt: name={{ item }} state=present update_cache=true
  with_items: "{{ apt_packages }}"

- name: installs prereq packages with pip
  pip: name={{ item }}
  with_items: "{{ pip_packages }}"

# provision opsmgr lxc containers
- name: create containers
  lxc_container:
      name: "{{ item.name }}"
      template: ubuntu
      state: stopped
      template_options: >
          --release {{ item.release }}
          --user {{ item.user }}
          --password {{ item.password }}
  with_items: "{{ containers }}"

- name: add static interface
  template:
      src: interfaces.j2
      dest: /var/lib/lxc/{{ item.name }}/rootfs/etc/network/interfaces
      mode: 0644
  with_items: "{{ containers }}"

# configure connection parameters for each container

- name: create .ssh directory
  file:
      path: /var/lib/lxc/{{ item.name }}/rootfs/home/{{ item.user }}/.ssh
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"
      mode: 0700
      state: directory
  with_items: "{{ containers }}"

- name: copy ssh key
  copy:
      src: opsmgr.pub
      dest: /var/lib/lxc/{{ item.name }}/rootfs/home/{{ item.user }}/.ssh/authorized_keys
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"
      mode: 0600
  with_items: "{{ containers }}"

- name: assures sudoers.d directory exists
  file:
    path: /var/lib/lxc/{{ item.name }}/rootfs/etc/sudoers.d
    owner: root
    group: root
    mode: 0755
    state: directory
  with_items: "{{ containers }}"

- name: assures sudoers has include
  lineinfile:
    dest: /var/lib/lxc/{{ item.name }}/rootfs/etc/sudoers
    line: "#includedir /etc/sudoers.d"
    state: present
    validate: "/usr/sbin/visudo -cf %s"
  with_items: "{{ containers }}"

- name: create sudoers include file
  template:
    src: sudoers.d.j2
    dest: /var/lib/lxc/{{ item.name }}/rootfs/etc/sudoers.d/opsmgr
    owner: root
    group: root
    mode: 0440
    validate: "/usr/sbin/visudo -cf %s"
  with_items: "{{ containers }}"

# configure firewall parameters for each container

- name: get iptables rules
  shell: iptables -t nat -L
  register: iptablesrules
  always_run: yes

- name: create iptables rule to forward container port
  command: iptables -t nat -I PREROUTING -p tcp -d {{ ansible_default_ipv4.address }} --dport {{ item.hport }} -j DNAT --to {{ item.address }}:{{ item.cport }} -m comment --comment "lxc-opsmgr-{{ item.name }}"
  when: iptablesrules.stdout.find("lxc-opsmgr-{{ item.name }}") == -1
  with_items: "{{ containers }}"

- name: save the iptables change
  shell: iptables-save > /etc/iptables.rules

- name: load iptables on boot
  lineinfile:
      line: "pre-up iptables-restore < /etc/iptables.rules"
      dest: "/etc/network/interfaces"

# add containers to dynamic inventory and start them

#- name: set container to autostart
#  lineinfile:
#      line: "lxc.start.auto = 1"
#      dest: "/var/lib/lxc/{{ item.name }}/config"
#  with_items: "{{ containers }}"

- name: start container, fix permissions, install python
  lxc_container:
    name: "{{ item.name }}"
    state: started
    container_command: |
        chown -R {{ ansible_ssh_user }}:{{ ansible_ssh_user }} /home/{{ ansible_ssh_user }}
        apt-get update
        apt-get install -y python
    container_config:
        - "lxc.start.auto = 1"
  with_items: "{{ containers }}"

- name: register containers in dynamic inventory
  add_host:
      name: "{{ item.name }}"
      group: "{{ item.role }}"
  with_items: "{{ containers }}"

# add opsmgr python package integration here

# add opsmgr horizon extension integration here

